"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./hooks/use-chat.tsx":
/*!****************************!*\
  !*** ./hooks/use-chat.tsx ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useChat: function() { return /* binding */ useChat; }\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/index.mjs\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand/middleware */ \"(app-pages-browser)/./node_modules/zustand/esm/middleware.mjs\");\n/* __next_internal_client_entry_do_not_use__ useChat auto */ \n\n\n// Simulating AI response with a delay\nconst getAiResponse = async (prompt)=>{\n    console.log(\"Simulating AI response for prompt:\", prompt);\n    return new Promise((resolve)=>{\n        setTimeout(()=>{\n            // Simulate different types of responses based on prompt content\n            if (prompt.toLowerCase().includes(\"blog\")) {\n                resolve(\"# How to Write Effective Blog Posts\\n\\n## Introduction\\nCreating engaging blog content requires understanding your audience and delivering value through your writing.\\n\\n## Key Elements of Successful Blogs\\n1. **Compelling Headlines** - Attract readers with clear, interesting titles\\n2. **Valuable Content** - Provide actionable insights or entertaining stories\\n3. **Visual Elements** - Break up text with images and formatting\\n4. **Consistent Voice** - Develop a recognizable writing style\\n\\n## Conclusion\\nConsistency and quality will help you build an audience over time. Start with topics you're passionate about and expand from there.\");\n            } else if (prompt.toLowerCase().includes(\"code\") || prompt.toLowerCase().includes(\"programming\")) {\n                resolve(\"Here's a simple React component example:\\n\\n```jsx\\nimport React, { useState } from 'react';\\n\\nfunction Counter() {\\n  const [count, setCount] = useState(0);\\n  \\n  return (\\n    <div>\\n      <p>You clicked {count} times</p>\\n      <button onClick={() => setCount(count + 1)}>\\n        Click me\\n      </button>\\n    </div>\\n  );\\n}\\n\\nexport default Counter;\\n```\\n\\nThis component maintains a count state and increases it when the button is clicked.\");\n            } else {\n                resolve(\"I'd be happy to help with that! Your question touches on an interesting topic. Based on current understanding, there are several approaches we could take:\\n\\n1. First, consider the fundamental principles involved\\n2. Next, look at practical applications\\n3. Finally, think about how this applies to your specific situation\\n\\nWould you like me to elaborate on any of these points in particular?\");\n            }\n        }, 2000); // Simulate response time\n    });\n};\nconst useChat = (0,zustand__WEBPACK_IMPORTED_MODULE_0__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_1__.persist)((set, get)=>({\n        chatHistory: [],\n        currentChatId: null,\n        isAiThinking: false,\n        currentChat: null,\n        startNewChat: ()=>{\n            const newChatId = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n            const newChat = {\n                id: newChatId,\n                messages: [],\n                timestamp: Date.now()\n            };\n            set((state)=>({\n                    chatHistory: [\n                        newChat,\n                        ...state.chatHistory\n                    ],\n                    currentChatId: newChatId,\n                    currentChat: newChat\n                }));\n            return newChatId;\n        },\n        sendPrompt: async (content)=>{\n            let chatId = get().currentChatId;\n            // If no current chat, create a new one\n            if (!chatId) {\n                chatId = get().startNewChat();\n            }\n            // Create user message\n            const userMessage = {\n                id: (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(),\n                content,\n                role: \"user\",\n                timestamp: Date.now()\n            };\n            // Update state with user message\n            set((state)=>{\n                const updatedChatHistory = state.chatHistory.map((chat)=>{\n                    if (chat.id === chatId) {\n                        return {\n                            ...chat,\n                            messages: [\n                                ...chat.messages,\n                                userMessage\n                            ],\n                            timestamp: Date.now()\n                        };\n                    }\n                    return chat;\n                });\n                const currentChat = updatedChatHistory.find((chat)=>chat.id === chatId) || null;\n                console.log(currentChat);\n                return {\n                    chatHistory: updatedChatHistory,\n                    currentChat,\n                    isAiThinking: true\n                };\n            });\n            try {\n                // Get AI response\n                const aiResponseContent = await getAiResponse(content);\n                // Create AI message\n                const aiMessage = {\n                    id: (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(),\n                    content: aiResponseContent,\n                    role: \"assistant\",\n                    timestamp: Date.now()\n                };\n                // Update state with AI message\n                set((state)=>{\n                    const updatedChatHistory = state.chatHistory.map((chat)=>{\n                        if (chat.id === chatId) {\n                            return {\n                                ...chat,\n                                messages: [\n                                    ...chat.messages,\n                                    aiMessage\n                                ],\n                                timestamp: Date.now()\n                            };\n                        }\n                        return chat;\n                    });\n                    const currentChat = updatedChatHistory.find((chat)=>chat.id === chatId) || null;\n                    return {\n                        chatHistory: updatedChatHistory,\n                        currentChat,\n                        isAiThinking: false\n                    };\n                });\n            } catch (error) {\n                console.error(\"Error getting AI response:\", error);\n                set({\n                    isAiThinking: false\n                });\n            }\n        },\n        selectChat: (chatId)=>{\n            const selectedChat = get().chatHistory.find((chat)=>chat.id === chatId) || null;\n            set({\n                currentChatId: chatId,\n                currentChat: selectedChat\n            });\n        },\n        deleteChat: (chatId)=>{\n            set((state)=>{\n                const updatedChatHistory = state.chatHistory.filter((chat)=>chat.id !== chatId);\n                // If we're deleting the current chat, update the current chat ID\n                const updatedCurrentChatId = state.currentChatId === chatId ? updatedChatHistory.length > 0 ? updatedChatHistory[0].id : null : state.currentChatId;\n                const updatedCurrentChat = updatedCurrentChatId ? updatedChatHistory.find((chat)=>chat.id === updatedCurrentChatId) || null : null;\n                return {\n                    chatHistory: updatedChatHistory,\n                    currentChatId: updatedCurrentChatId,\n                    currentChat: updatedCurrentChat\n                };\n            });\n        }\n    }), {\n    name: \"ai-assistant-chat\"\n}));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2hvb2tzL3VzZS1jaGF0LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7OzZEQUdvQztBQUNIO0FBQ1k7QUFhN0Msc0NBQXNDO0FBQ3RDLE1BQU1JLGdCQUFnQixPQUFRQztJQUU1QkMsUUFBUUMsR0FBRyxDQUFFLHNDQUFzQ0Y7SUFFbkQsT0FBTyxJQUFJRyxRQUFRLENBQUNDO1FBQ2xCQyxXQUFXO1lBQ1QsZ0VBQWdFO1lBQ2hFLElBQUlMLE9BQU9NLFdBQVcsR0FBR0MsUUFBUSxDQUFDLFNBQVM7Z0JBQ3pDSCxRQUNFO1lBRUosT0FBTyxJQUFJSixPQUFPTSxXQUFXLEdBQUdDLFFBQVEsQ0FBQyxXQUFXUCxPQUFPTSxXQUFXLEdBQUdDLFFBQVEsQ0FBQyxnQkFBZ0I7Z0JBQ2hHSCxRQUNFO1lBRUosT0FBTztnQkFDTEEsUUFDRTtZQUVKO1FBQ0YsR0FBRyxPQUFPLHlCQUF5QjtJQUNyQztBQUNGO0FBRU8sTUFBTUksVUFBVVgsK0NBQU1BLEdBQzNCQywyREFBT0EsQ0FDTCxDQUFDVyxLQUFLQyxNQUFTO1FBQ2JDLGFBQWEsRUFBRTtRQUNmQyxlQUFlO1FBQ2ZDLGNBQWM7UUFDZEMsYUFBYTtRQUViQyxjQUFjO1lBQ1osTUFBTUMsWUFBWXBCLGdEQUFNQTtZQUN4QixNQUFNcUIsVUFBZ0I7Z0JBQ3BCQyxJQUFJRjtnQkFDSkcsVUFBVSxFQUFFO2dCQUNaQyxXQUFXQyxLQUFLQyxHQUFHO1lBQ3JCO1lBRUFiLElBQUksQ0FBQ2MsUUFBVztvQkFDZFosYUFBYTt3QkFBQ007MkJBQVlNLE1BQU1aLFdBQVc7cUJBQUM7b0JBQzVDQyxlQUFlSTtvQkFDZkYsYUFBYUc7Z0JBQ2Y7WUFFQSxPQUFPRDtRQUNUO1FBRUFRLFlBQVksT0FBT0M7WUFDakIsSUFBSUMsU0FBU2hCLE1BQU1FLGFBQWE7WUFFaEMsdUNBQXVDO1lBQ3ZDLElBQUksQ0FBQ2MsUUFBUTtnQkFDWEEsU0FBU2hCLE1BQU1LLFlBQVk7WUFDN0I7WUFFQSxzQkFBc0I7WUFDdEIsTUFBTVksY0FBdUI7Z0JBQzNCVCxJQUFJdEIsZ0RBQU1BO2dCQUNWNkI7Z0JBQ0FHLE1BQU07Z0JBQ05SLFdBQVdDLEtBQUtDLEdBQUc7WUFDckI7WUFFQSxpQ0FBaUM7WUFDakNiLElBQUksQ0FBQ2M7Z0JBQ0gsTUFBTU0scUJBQXFCTixNQUFNWixXQUFXLENBQUNtQixHQUFHLENBQUMsQ0FBQ0M7b0JBQ2hELElBQUlBLEtBQUtiLEVBQUUsS0FBS1EsUUFBUTt3QkFDdEIsT0FBTzs0QkFDTCxHQUFHSyxJQUFJOzRCQUNQWixVQUFVO21DQUFJWSxLQUFLWixRQUFRO2dDQUFFUTs2QkFBWTs0QkFDekNQLFdBQVdDLEtBQUtDLEdBQUc7d0JBQ3JCO29CQUNGO29CQUNBLE9BQU9TO2dCQUNUO2dCQUVBLE1BQU1qQixjQUFjZSxtQkFBbUJHLElBQUksQ0FBRSxDQUFFRCxPQUFVQSxLQUFLYixFQUFFLEtBQUtRLFdBQVk7Z0JBRWpGekIsUUFBUUMsR0FBRyxDQUFDWTtnQkFFWixPQUFPO29CQUNMSCxhQUFha0I7b0JBQ2JmO29CQUNBRCxjQUFjO2dCQUNoQjtZQUNGO1lBRUEsSUFBSTtnQkFDRixrQkFBa0I7Z0JBQ2xCLE1BQU1vQixvQkFBb0IsTUFBTWxDLGNBQWMwQjtnQkFFOUMsb0JBQW9CO2dCQUNwQixNQUFNUyxZQUFxQjtvQkFDekJoQixJQUFJdEIsZ0RBQU1BO29CQUNWNkIsU0FBU1E7b0JBQ1RMLE1BQU07b0JBQ05SLFdBQVdDLEtBQUtDLEdBQUc7Z0JBQ3JCO2dCQUVBLCtCQUErQjtnQkFDL0JiLElBQUksQ0FBQ2M7b0JBQ0gsTUFBTU0scUJBQXFCTixNQUFNWixXQUFXLENBQUNtQixHQUFHLENBQUMsQ0FBQ0M7d0JBQ2hELElBQUlBLEtBQUtiLEVBQUUsS0FBS1EsUUFBUTs0QkFDdEIsT0FBTztnQ0FDTCxHQUFHSyxJQUFJO2dDQUNQWixVQUFVO3VDQUFJWSxLQUFLWixRQUFRO29DQUFFZTtpQ0FBVTtnQ0FDdkNkLFdBQVdDLEtBQUtDLEdBQUc7NEJBQ3JCO3dCQUNGO3dCQUNBLE9BQU9TO29CQUNUO29CQUVBLE1BQU1qQixjQUFjZSxtQkFBbUJHLElBQUksQ0FBQyxDQUFDRCxPQUFTQSxLQUFLYixFQUFFLEtBQUtRLFdBQVc7b0JBRTdFLE9BQU87d0JBQ0xmLGFBQWFrQjt3QkFDYmY7d0JBQ0FELGNBQWM7b0JBQ2hCO2dCQUNGO1lBQ0YsRUFBRSxPQUFPc0IsT0FBTztnQkFDZGxDLFFBQVFrQyxLQUFLLENBQUMsOEJBQThCQTtnQkFDNUMxQixJQUFJO29CQUFFSSxjQUFjO2dCQUFNO1lBQzVCO1FBQ0Y7UUFFQXVCLFlBQVksQ0FBQ1Y7WUFDWCxNQUFNVyxlQUFlM0IsTUFBTUMsV0FBVyxDQUFDcUIsSUFBSSxDQUFDLENBQUNELE9BQVNBLEtBQUtiLEVBQUUsS0FBS1EsV0FBVztZQUM3RWpCLElBQUk7Z0JBQ0ZHLGVBQWVjO2dCQUNmWixhQUFhdUI7WUFDZjtRQUNGO1FBRUFDLFlBQVksQ0FBQ1o7WUFDWGpCLElBQUksQ0FBQ2M7Z0JBQ0gsTUFBTU0scUJBQXFCTixNQUFNWixXQUFXLENBQUM0QixNQUFNLENBQ2pELENBQUNSLE9BQVNBLEtBQUtiLEVBQUUsS0FBS1E7Z0JBR3hCLGlFQUFpRTtnQkFDakUsTUFBTWMsdUJBQ0pqQixNQUFNWCxhQUFhLEtBQUtjLFNBQ3BCRyxtQkFBbUJZLE1BQU0sR0FBRyxJQUMxQlosa0JBQWtCLENBQUMsRUFBRSxDQUFDWCxFQUFFLEdBQ3hCLE9BQ0ZLLE1BQU1YLGFBQWE7Z0JBRXpCLE1BQU04QixxQkFDSkYsdUJBQ0lYLG1CQUFtQkcsSUFBSSxDQUFDLENBQUNELE9BQVNBLEtBQUtiLEVBQUUsS0FBS3NCLHlCQUF5QixPQUN2RTtnQkFFTixPQUFPO29CQUNMN0IsYUFBYWtCO29CQUNiakIsZUFBZTRCO29CQUNmMUIsYUFBYTRCO2dCQUNmO1lBQ0Y7UUFDRjtJQUNGLElBQ0E7SUFDRUMsTUFBTTtBQUNSLElBRUYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vaG9va3MvdXNlLWNoYXQudHN4P2MwNTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCB7IENoYXQsIE1lc3NhZ2UgfSBmcm9tIFwiQC90eXBlcy9jaGF0XCI7XG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tIFwidXVpZFwiO1xuaW1wb3J0IHsgY3JlYXRlIH0gZnJvbSBcInp1c3RhbmRcIjtcbmltcG9ydCB7IHBlcnNpc3QgfSBmcm9tIFwienVzdGFuZC9taWRkbGV3YXJlXCI7XG5cbmludGVyZmFjZSBDaGF0U3RhdGUge1xuICBjaGF0SGlzdG9yeTogQ2hhdFtdO1xuICBjdXJyZW50Q2hhdElkOiBzdHJpbmcgfCBudWxsO1xuICBpc0FpVGhpbmtpbmc6IGJvb2xlYW47XG4gIGN1cnJlbnRDaGF0OiBDaGF0IHwgbnVsbDtcbiAgc3RhcnROZXdDaGF0OiAoKSA9PiBzdHJpbmc7XG4gIHNlbmRQcm9tcHQ6IChjb250ZW50OiBzdHJpbmcpID0+IHZvaWQ7XG4gIHNlbGVjdENoYXQ6IChjaGF0SWQ6IHN0cmluZykgPT4gdm9pZDtcbiAgZGVsZXRlQ2hhdDogKGNoYXRJZDogc3RyaW5nKSA9PiB2b2lkO1xufVxuXG4vLyBTaW11bGF0aW5nIEFJIHJlc3BvbnNlIHdpdGggYSBkZWxheVxuY29uc3QgZ2V0QWlSZXNwb25zZSA9IGFzeW5jICggcHJvbXB0OiBzdHJpbmcgKTogUHJvbWlzZTxzdHJpbmc+ID0+XG57XG4gIGNvbnNvbGUubG9nKCBcIlNpbXVsYXRpbmcgQUkgcmVzcG9uc2UgZm9yIHByb21wdDpcIiwgcHJvbXB0ICk7XG4gIFxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIC8vIFNpbXVsYXRlIGRpZmZlcmVudCB0eXBlcyBvZiByZXNwb25zZXMgYmFzZWQgb24gcHJvbXB0IGNvbnRlbnRcbiAgICAgIGlmIChwcm9tcHQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhcImJsb2dcIikpIHtcbiAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICBcIiMgSG93IHRvIFdyaXRlIEVmZmVjdGl2ZSBCbG9nIFBvc3RzXFxuXFxuIyMgSW50cm9kdWN0aW9uXFxuQ3JlYXRpbmcgZW5nYWdpbmcgYmxvZyBjb250ZW50IHJlcXVpcmVzIHVuZGVyc3RhbmRpbmcgeW91ciBhdWRpZW5jZSBhbmQgZGVsaXZlcmluZyB2YWx1ZSB0aHJvdWdoIHlvdXIgd3JpdGluZy5cXG5cXG4jIyBLZXkgRWxlbWVudHMgb2YgU3VjY2Vzc2Z1bCBCbG9nc1xcbjEuICoqQ29tcGVsbGluZyBIZWFkbGluZXMqKiAtIEF0dHJhY3QgcmVhZGVycyB3aXRoIGNsZWFyLCBpbnRlcmVzdGluZyB0aXRsZXNcXG4yLiAqKlZhbHVhYmxlIENvbnRlbnQqKiAtIFByb3ZpZGUgYWN0aW9uYWJsZSBpbnNpZ2h0cyBvciBlbnRlcnRhaW5pbmcgc3Rvcmllc1xcbjMuICoqVmlzdWFsIEVsZW1lbnRzKiogLSBCcmVhayB1cCB0ZXh0IHdpdGggaW1hZ2VzIGFuZCBmb3JtYXR0aW5nXFxuNC4gKipDb25zaXN0ZW50IFZvaWNlKiogLSBEZXZlbG9wIGEgcmVjb2duaXphYmxlIHdyaXRpbmcgc3R5bGVcXG5cXG4jIyBDb25jbHVzaW9uXFxuQ29uc2lzdGVuY3kgYW5kIHF1YWxpdHkgd2lsbCBoZWxwIHlvdSBidWlsZCBhbiBhdWRpZW5jZSBvdmVyIHRpbWUuIFN0YXJ0IHdpdGggdG9waWNzIHlvdSdyZSBwYXNzaW9uYXRlIGFib3V0IGFuZCBleHBhbmQgZnJvbSB0aGVyZS5cIlxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChwcm9tcHQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhcImNvZGVcIikgfHwgcHJvbXB0LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoXCJwcm9ncmFtbWluZ1wiKSkge1xuICAgICAgICByZXNvbHZlKFxuICAgICAgICAgIFwiSGVyZSdzIGEgc2ltcGxlIFJlYWN0IGNvbXBvbmVudCBleGFtcGxlOlxcblxcbmBgYGpzeFxcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcXG5cXG5mdW5jdGlvbiBDb3VudGVyKCkge1xcbiAgY29uc3QgW2NvdW50LCBzZXRDb3VudF0gPSB1c2VTdGF0ZSgwKTtcXG4gIFxcbiAgcmV0dXJuIChcXG4gICAgPGRpdj5cXG4gICAgICA8cD5Zb3UgY2xpY2tlZCB7Y291bnR9IHRpbWVzPC9wPlxcbiAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gc2V0Q291bnQoY291bnQgKyAxKX0+XFxuICAgICAgICBDbGljayBtZVxcbiAgICAgIDwvYnV0dG9uPlxcbiAgICA8L2Rpdj5cXG4gICk7XFxufVxcblxcbmV4cG9ydCBkZWZhdWx0IENvdW50ZXI7XFxuYGBgXFxuXFxuVGhpcyBjb21wb25lbnQgbWFpbnRhaW5zIGEgY291bnQgc3RhdGUgYW5kIGluY3JlYXNlcyBpdCB3aGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZC5cIlxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICBcIkknZCBiZSBoYXBweSB0byBoZWxwIHdpdGggdGhhdCEgWW91ciBxdWVzdGlvbiB0b3VjaGVzIG9uIGFuIGludGVyZXN0aW5nIHRvcGljLiBCYXNlZCBvbiBjdXJyZW50IHVuZGVyc3RhbmRpbmcsIHRoZXJlIGFyZSBzZXZlcmFsIGFwcHJvYWNoZXMgd2UgY291bGQgdGFrZTpcXG5cXG4xLiBGaXJzdCwgY29uc2lkZXIgdGhlIGZ1bmRhbWVudGFsIHByaW5jaXBsZXMgaW52b2x2ZWRcXG4yLiBOZXh0LCBsb29rIGF0IHByYWN0aWNhbCBhcHBsaWNhdGlvbnNcXG4zLiBGaW5hbGx5LCB0aGluayBhYm91dCBob3cgdGhpcyBhcHBsaWVzIHRvIHlvdXIgc3BlY2lmaWMgc2l0dWF0aW9uXFxuXFxuV291bGQgeW91IGxpa2UgbWUgdG8gZWxhYm9yYXRlIG9uIGFueSBvZiB0aGVzZSBwb2ludHMgaW4gcGFydGljdWxhcj9cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sIDIwMDApOyAvLyBTaW11bGF0ZSByZXNwb25zZSB0aW1lXG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZUNoYXQgPSBjcmVhdGU8Q2hhdFN0YXRlPigpKFxuICBwZXJzaXN0KFxuICAgIChzZXQsIGdldCkgPT4gKHtcbiAgICAgIGNoYXRIaXN0b3J5OiBbXSxcbiAgICAgIGN1cnJlbnRDaGF0SWQ6IG51bGwsXG4gICAgICBpc0FpVGhpbmtpbmc6IGZhbHNlLFxuICAgICAgY3VycmVudENoYXQ6IG51bGwsXG5cbiAgICAgIHN0YXJ0TmV3Q2hhdDogKCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdDaGF0SWQgPSB1dWlkdjQoKTtcbiAgICAgICAgY29uc3QgbmV3Q2hhdDogQ2hhdCA9IHtcbiAgICAgICAgICBpZDogbmV3Q2hhdElkLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXSxcbiAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgIH07XG5cbiAgICAgICAgc2V0KChzdGF0ZSkgPT4gKHtcbiAgICAgICAgICBjaGF0SGlzdG9yeTogW25ld0NoYXQsIC4uLnN0YXRlLmNoYXRIaXN0b3J5XSxcbiAgICAgICAgICBjdXJyZW50Q2hhdElkOiBuZXdDaGF0SWQsXG4gICAgICAgICAgY3VycmVudENoYXQ6IG5ld0NoYXQsXG4gICAgICAgIH0pKTtcblxuICAgICAgICByZXR1cm4gbmV3Q2hhdElkO1xuICAgICAgfSxcblxuICAgICAgc2VuZFByb21wdDogYXN5bmMgKGNvbnRlbnQ6IHN0cmluZykgPT4ge1xuICAgICAgICBsZXQgY2hhdElkID0gZ2V0KCkuY3VycmVudENoYXRJZDtcbiAgICAgICAgXG4gICAgICAgIC8vIElmIG5vIGN1cnJlbnQgY2hhdCwgY3JlYXRlIGEgbmV3IG9uZVxuICAgICAgICBpZiAoIWNoYXRJZCkge1xuICAgICAgICAgIGNoYXRJZCA9IGdldCgpLnN0YXJ0TmV3Q2hhdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIHVzZXIgbWVzc2FnZVxuICAgICAgICBjb25zdCB1c2VyTWVzc2FnZTogTWVzc2FnZSA9IHtcbiAgICAgICAgICBpZDogdXVpZHY0KCksXG4gICAgICAgICAgY29udGVudCxcbiAgICAgICAgICByb2xlOiBcInVzZXJcIixcbiAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gVXBkYXRlIHN0YXRlIHdpdGggdXNlciBtZXNzYWdlXG4gICAgICAgIHNldCgoc3RhdGUpID0+IHtcbiAgICAgICAgICBjb25zdCB1cGRhdGVkQ2hhdEhpc3RvcnkgPSBzdGF0ZS5jaGF0SGlzdG9yeS5tYXAoKGNoYXQpID0+IHtcbiAgICAgICAgICAgIGlmIChjaGF0LmlkID09PSBjaGF0SWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5jaGF0LFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiBbLi4uY2hhdC5tZXNzYWdlcywgdXNlck1lc3NhZ2VdLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjaGF0O1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgY29uc3QgY3VycmVudENoYXQgPSB1cGRhdGVkQ2hhdEhpc3RvcnkuZmluZCggKCBjaGF0ICkgPT4gY2hhdC5pZCA9PT0gY2hhdElkICkgfHwgbnVsbDtcbiAgICAgICAgICBcbiAgICAgICAgICBjb25zb2xlLmxvZyhjdXJyZW50Q2hhdClcblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjaGF0SGlzdG9yeTogdXBkYXRlZENoYXRIaXN0b3J5LFxuICAgICAgICAgICAgY3VycmVudENoYXQsXG4gICAgICAgICAgICBpc0FpVGhpbmtpbmc6IHRydWUsXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBHZXQgQUkgcmVzcG9uc2VcbiAgICAgICAgICBjb25zdCBhaVJlc3BvbnNlQ29udGVudCA9IGF3YWl0IGdldEFpUmVzcG9uc2UoY29udGVudCk7XG5cbiAgICAgICAgICAvLyBDcmVhdGUgQUkgbWVzc2FnZVxuICAgICAgICAgIGNvbnN0IGFpTWVzc2FnZTogTWVzc2FnZSA9IHtcbiAgICAgICAgICAgIGlkOiB1dWlkdjQoKSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGFpUmVzcG9uc2VDb250ZW50LFxuICAgICAgICAgICAgcm9sZTogXCJhc3Npc3RhbnRcIixcbiAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gVXBkYXRlIHN0YXRlIHdpdGggQUkgbWVzc2FnZVxuICAgICAgICAgIHNldCgoc3RhdGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRDaGF0SGlzdG9yeSA9IHN0YXRlLmNoYXRIaXN0b3J5Lm1hcCgoY2hhdCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoY2hhdC5pZCA9PT0gY2hhdElkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgIC4uLmNoYXQsXG4gICAgICAgICAgICAgICAgICBtZXNzYWdlczogWy4uLmNoYXQubWVzc2FnZXMsIGFpTWVzc2FnZV0sXG4gICAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gY2hhdDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Q2hhdCA9IHVwZGF0ZWRDaGF0SGlzdG9yeS5maW5kKChjaGF0KSA9PiBjaGF0LmlkID09PSBjaGF0SWQpIHx8IG51bGw7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGNoYXRIaXN0b3J5OiB1cGRhdGVkQ2hhdEhpc3RvcnksXG4gICAgICAgICAgICAgIGN1cnJlbnRDaGF0LFxuICAgICAgICAgICAgICBpc0FpVGhpbmtpbmc6IGZhbHNlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZ2V0dGluZyBBSSByZXNwb25zZTpcIiwgZXJyb3IpO1xuICAgICAgICAgIHNldCh7IGlzQWlUaGlua2luZzogZmFsc2UgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHNlbGVjdENoYXQ6IChjaGF0SWQ6IHN0cmluZykgPT4ge1xuICAgICAgICBjb25zdCBzZWxlY3RlZENoYXQgPSBnZXQoKS5jaGF0SGlzdG9yeS5maW5kKChjaGF0KSA9PiBjaGF0LmlkID09PSBjaGF0SWQpIHx8IG51bGw7XG4gICAgICAgIHNldCh7XG4gICAgICAgICAgY3VycmVudENoYXRJZDogY2hhdElkLFxuICAgICAgICAgIGN1cnJlbnRDaGF0OiBzZWxlY3RlZENoYXQsXG4gICAgICAgIH0pO1xuICAgICAgfSxcblxuICAgICAgZGVsZXRlQ2hhdDogKGNoYXRJZDogc3RyaW5nKSA9PiB7XG4gICAgICAgIHNldCgoc3RhdGUpID0+IHtcbiAgICAgICAgICBjb25zdCB1cGRhdGVkQ2hhdEhpc3RvcnkgPSBzdGF0ZS5jaGF0SGlzdG9yeS5maWx0ZXIoXG4gICAgICAgICAgICAoY2hhdCkgPT4gY2hhdC5pZCAhPT0gY2hhdElkXG4gICAgICAgICAgKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBJZiB3ZSdyZSBkZWxldGluZyB0aGUgY3VycmVudCBjaGF0LCB1cGRhdGUgdGhlIGN1cnJlbnQgY2hhdCBJRFxuICAgICAgICAgIGNvbnN0IHVwZGF0ZWRDdXJyZW50Q2hhdElkID0gXG4gICAgICAgICAgICBzdGF0ZS5jdXJyZW50Q2hhdElkID09PSBjaGF0SWRcbiAgICAgICAgICAgICAgPyB1cGRhdGVkQ2hhdEhpc3RvcnkubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgID8gdXBkYXRlZENoYXRIaXN0b3J5WzBdLmlkXG4gICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICAgIDogc3RhdGUuY3VycmVudENoYXRJZDtcbiAgICAgICAgICBcbiAgICAgICAgICBjb25zdCB1cGRhdGVkQ3VycmVudENoYXQgPSBcbiAgICAgICAgICAgIHVwZGF0ZWRDdXJyZW50Q2hhdElkXG4gICAgICAgICAgICAgID8gdXBkYXRlZENoYXRIaXN0b3J5LmZpbmQoKGNoYXQpID0+IGNoYXQuaWQgPT09IHVwZGF0ZWRDdXJyZW50Q2hhdElkKSB8fCBudWxsXG4gICAgICAgICAgICAgIDogbnVsbDtcblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjaGF0SGlzdG9yeTogdXBkYXRlZENoYXRIaXN0b3J5LFxuICAgICAgICAgICAgY3VycmVudENoYXRJZDogdXBkYXRlZEN1cnJlbnRDaGF0SWQsXG4gICAgICAgICAgICBjdXJyZW50Q2hhdDogdXBkYXRlZEN1cnJlbnRDaGF0LFxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9KSxcbiAgICB7XG4gICAgICBuYW1lOiBcImFpLWFzc2lzdGFudC1jaGF0XCIsXG4gICAgfVxuICApXG4pOyJdLCJuYW1lcyI6WyJ2NCIsInV1aWR2NCIsImNyZWF0ZSIsInBlcnNpc3QiLCJnZXRBaVJlc3BvbnNlIiwicHJvbXB0IiwiY29uc29sZSIsImxvZyIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJ1c2VDaGF0Iiwic2V0IiwiZ2V0IiwiY2hhdEhpc3RvcnkiLCJjdXJyZW50Q2hhdElkIiwiaXNBaVRoaW5raW5nIiwiY3VycmVudENoYXQiLCJzdGFydE5ld0NoYXQiLCJuZXdDaGF0SWQiLCJuZXdDaGF0IiwiaWQiLCJtZXNzYWdlcyIsInRpbWVzdGFtcCIsIkRhdGUiLCJub3ciLCJzdGF0ZSIsInNlbmRQcm9tcHQiLCJjb250ZW50IiwiY2hhdElkIiwidXNlck1lc3NhZ2UiLCJyb2xlIiwidXBkYXRlZENoYXRIaXN0b3J5IiwibWFwIiwiY2hhdCIsImZpbmQiLCJhaVJlc3BvbnNlQ29udGVudCIsImFpTWVzc2FnZSIsImVycm9yIiwic2VsZWN0Q2hhdCIsInNlbGVjdGVkQ2hhdCIsImRlbGV0ZUNoYXQiLCJmaWx0ZXIiLCJ1cGRhdGVkQ3VycmVudENoYXRJZCIsImxlbmd0aCIsInVwZGF0ZWRDdXJyZW50Q2hhdCIsIm5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/use-chat.tsx\n"));

/***/ })

});